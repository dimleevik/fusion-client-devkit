on:
  workflow_dispatch:
    inputs:
      versionName:
        description: "Name of version (x.x)"
        required: true
      patchName:
        description: "Name of version patch"
        default: "0"
jobs:
  validate-release-tag:
    runs-on: ubuntu-latest
    name: Validate inputs
    environment: fusion-devkit-env
    # if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Validate major and minor semver input
        run: |
          major_minor_semver_regex='^(0|[1-9]\d*)\.(0|[1-9]\d*)$'
          if [[ ! "${{ inputs.versionName }}" =~ $major_minor_semver_regex ]]; then
            echo "Error: The provided major and minor semver string '${{ inputs.versionName }}' is invalid." 
            exit 1
          fi
        shell: bash

      - name: Get tag
        run: echo RELEASE_TAG=v${{ inputs.versionName }}.0 >> $GITHUB_ENV

      - name: Check if tag exists
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
        run: |
          trap "exit 0" EXIT
          response=$(gh api -H "Accept: application/vnd.github+json" /repos/${{ github.repository }}/git/ref/tags/$RELEASE_TAG)
          if [[ "$response" == *"$RELEASE_TAG"* ]]; then
            trap "exit 1" EXIT
            echo "Error: Tag $RELEASE_TAG already exists"
            exit 1 
          fi

  build-amd-ver:
    needs: validate-release-tag
    name: Validate inputs
    uses: ./.github/workflows/build-and-scan-image.yml
    with:
      platform_name: amd64
      image_name: ${{ vars.IMAGE_NAME }}
      tag: v${{ github.event.inputs.versionName }}.0
      swagger_ui_version: ${{ vars.SWAGGER_UI_VERSION }}
    secrets: inherit

  # build-arm-ver:
  #   needs: validate-release-tag
  #   name: Validate inputs
  #   uses: ./.github/workflows/build-and-scan-image.yml
  #   with:
  #     platform_name: arm64
  #     image_name: ${{ vars.IMAGE_NAME }}
  #     tag: v${{ inputs.versionName }}.0
  #     swagger_ui_version: ${{ vars.SWAGGER_UI_VERSION }}
  #   secrets: inherit

  # publish-image:
  #   runs-on: ubuntu-latest
  #   needs: [build-amd-ver, build-arm-ver]
  #   name: Publish images
  #   steps:
  #     - name: Download all workflow run artifacts
  #       uses: actions/download-artifact@v3

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #       with:
  #         driver-opts: |
  #           network=host
  #         platforms: linux/amd64,linux/arm64

  #     # - name: Login to image public registry
  #     #   uses: docker/login-action@v2
  #     #   with:
  #     #     registry: ${{ vars.IMAGE_REGISTRY }}
  #     #     username: ${{ secrets.DOCKER_USER }}
  #     #     password: ${{ secrets.DOCKER_TOKEN }}

  #     - name: Load dockerimages
  #       run: docker load -i fusion-devkit-amd64/fusion-devkit-amd64.tar

  #     - name: Load dockerimages
  #       run: docker load -i fusion-devkit-arm64/fusion-devkit-arm64.tar

  #     - name: Show images list
  #       run: for i in `docker images --format {{.ID}}`; do echo $i `docker image inspect $i | grep Architecture` `docker image inspect $i | grep RepoTags -A 1`; done

  # - name: Login to image public registry
  #   uses: docker/login-action@v2
  #   with:
  #     registry: ${{ vars.IMAGE_REGISTRY }}
  #     username: ${{ secrets.DOCKER_USER }}
  #     password: ${{ secrets.DOCKER_TOKEN }}

  # - name: Build and push image public registry
  #   uses: docker/build-push-action@v4
  #   with:
  #     push: true
  #     provenance: false
  #     platforms: linux/amd64,linux/arm64
  #     build-args: |
  #       SWAGGER_UI_IMAGE=swagger-ui:${{ vars.SWAGGER_UI_VERSION }}
  #       LOCAL_REGISTRY=localhost:5000/
  #     tags: |
  #       ${{ vars.IMAGE_REGISTRY }}/${{ vars.IMAGE_NAME }}:${{ env.RELEASE_TAG }}
  #       ${{ vars.IMAGE_REGISTRY }}/${{ vars.IMAGE_NAME }}:latest

  # - name: Create artifact image amd64
  #   run: |
  #     docker pull ${{ vars.IMAGE_REGISTRY }}/${{ vars.IMAGE_NAME }}:${{ env.RELEASE_TAG }} --platform amd64 \
  #     && docker save ${{ vars.IMAGE_REGISTRY }}/${{ vars.IMAGE_NAME }}:${{ env.RELEASE_TAG }} > fusion-devkit-amd64.tar
  # - name: Create artifact image arm64
  #   run: |
  #     docker pull ${{ vars.IMAGE_REGISTRY }}/${{ vars.IMAGE_NAME }}:${{ env.RELEASE_TAG }} --platform arm64 \
  #     && docker save ${{ vars.IMAGE_REGISTRY }}/${{ vars.IMAGE_NAME }}:${{ env.RELEASE_TAG }} > fusion-devkit-arm64.tar

  # - name: Create tag
  #   uses: actions/github-script@v6
  #   with:
  #     script: |
  #       try{
  #         github.rest.git.createRef({
  #           owner: context.repo.owner,
  #           repo: context.repo.repo,
  #           ref: 'refs/tags/${{ env.RELEASE_TAG }}',
  #           sha: context.sha
  #         })
  #       } catch (error) {
  #         core.setFailed(error.message);
  #       }

  # - name: Create release branch
  #   uses: actions/github-script@v6
  #   with:
  #     script: |
  #       try{
  #         github.rest.git.createRef({
  #           owner: context.repo.owner,
  #           repo: context.repo.repo,
  #           ref: 'refs/heads/release/v${{ github.event.inputs.versionName }}',
  #           sha: context.sha
  #         });
  #       } catch (error) {
  #         core.setFailed(error.message);
  #       }

  # - name: Create a release in GitHub and upload assets
  #   env:
  #     GITHUB_TOKEN: ${{ github.TOKEN }}
  #   run: gh release create --title "Fusion-Devkit ${{ env.RELEASE_TAG }}" ${{ env.RELEASE_TAG }}  *.tar
  #   shell: bash
