on:
  workflow_dispatch:
    inputs:
      versionName:
        description: "Name of version (x.x)"
        required: true
      patchName:
        description: "Name of version patch"
        default: "0"
jobs:
  validate-release-tag:
    runs-on: ubuntu-latest
    name: Validate release tag
    environment: fusion-devkit-env
    # if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Validate major and minor semver input
        run: |
          major_minor_semver_regex='^(0|[1-9]\d*)\.(0|[1-9]\d*)$'
          if [[ ! "${{ github.event.inputs.versionName }}" =~ $major_minor_semver_regex ]]; then
            echo "Error: The provided major and minor semver string '${{ github.event.inputs.versionName }}' is invalid." 
            exit 1
          fi
        shell: bash
      - name: Validate patch semver input
        run: |
          patch_semver_regex='^(0|[1-9]\d*)(\-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$'
          if [[ ! "${{ github.event.inputs.patchName }}" =~ $patch_semver_regex ]]; then
            echo "Error: The provided patch semver string '${{ github.event.inputs.patchName }}' is invalid." 
            exit 1 
          fi
        shell: bash

      - name: Get tag
        run: echo RELEASE_TAG=v${{ github.event.inputs.versionName }}.${{ github.event.inputs.patchName }} >> $GITHUB_ENV

      - name: Check if tag exists
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
        run: |
          trap "exit 0" EXIT
          response=$(gh api -H "Accept: application/vnd.github+json" /repos/${{ github.repository }}/git/ref/tags/$RELEASE_TAG)
          if [[ "$response" == *"$RELEASE_TAG"* ]]; then
            trap "exit 1" EXIT
            echo "Error: Tag $RELEASE_TAG already exists"
            exit 1 
          fi

      - name: Print envs
        run: printenv

      - name: Build Dockerimage
        uses: ./.github/actions/build-image
        with:
          swagger-ui-version: ${{ vars.SWAGGER_UI_VERSION }}

      # - name: Login to image public registry
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ${{ vars.IMAGE_REGISTRY }}
      #     username: ${{ secrets.DOCKER_USER }}
      #     password: ${{ secrets.DOCKER_TOKEN }}

      # - name: Build and push image public registry
      #   uses: docker/build-push-action@v4
      #   with:
      #     push: true
      #     provenance: false
      #     platforms: linux/amd64,linux/arm64
      #     build-args: |
      #       SWAGGER_UI_IMAGE=swagger-ui:${{ vars.SWAGGER_UI_VERSION }}
      #       LOCAL_REGISTRY=localhost:5000/
      #     tags: |
      #       ${{ vars.IMAGE_REGISTRY }}/${{ vars.IMAGE_NAME }}:${{ env.RELEASE_TAG }}
      #       ${{ vars.IMAGE_REGISTRY }}/${{ vars.IMAGE_NAME }}:latest

      # - name: Create artifact image amd64
      #   run: |
      #     docker pull ${{ vars.IMAGE_REGISTRY }}/${{ vars.IMAGE_NAME }}:${{ env.RELEASE_TAG }} --platform amd64 \
      #     && docker save ${{ vars.IMAGE_REGISTRY }}/${{ vars.IMAGE_NAME }}:${{ env.RELEASE_TAG }} > fusion-devkit-amd64.tar
      # - name: Create artifact image arm64
      #   run: |
      #     docker pull ${{ vars.IMAGE_REGISTRY }}/${{ vars.IMAGE_NAME }}:${{ env.RELEASE_TAG }} --platform arm64 \
      #     && docker save ${{ vars.IMAGE_REGISTRY }}/${{ vars.IMAGE_NAME }}:${{ env.RELEASE_TAG }} > fusion-devkit-arm64.tar

      # - name: Create tag
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       try{
      #         github.rest.git.createRef({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           ref: 'refs/tags/${{ env.RELEASE_TAG }}',
      #           sha: context.sha
      #         })
      #       } catch (error) {
      #         core.setFailed(error.message);
      #       }

      # - name: Create release branch
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       try{
      #         github.rest.git.createRef({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           ref: 'refs/heads/release/v${{ github.event.inputs.versionName }}',
      #           sha: context.sha
      #         });
      #       } catch (error) {
      #         core.setFailed(error.message);
      #       }

      # - name: Create a release in GitHub and upload assets
      #   env:
      #     GITHUB_TOKEN: ${{ github.TOKEN }}
      #   run: gh release create --title "Fusion-Devkit ${{ env.RELEASE_TAG }}" ${{ env.RELEASE_TAG }}  *.tar
      #   shell: bash
