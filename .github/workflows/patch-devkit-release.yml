on:
  workflow_dispatch:
    inputs:
      patchName:
        description: "Name of version patch (x)"
        required: true
      updateLatest:
        type: boolean
        description: "Push image to latest tag"
        default: false

jobs:
  validate-patch-tag:
    runs-on: ubuntu-latest
    name: Validate patch version
    environment: fusion-devkit-env
    if: startsWith(github.ref, 'refs/heads/stable-branch')
    outputs:
      PATCH_TAG: ${{ steps.set_tag.outputs.PATCH_TAG }}
    steps:
      - uses: actions/checkout@v3

      - name: Validate patch semver input
        run: |
          patch_semver_regex='^(0|[1-9]\d*)(\-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$'
          if [[ ! "${{ inputs.patchName }}" =~ $patch_semver_regex ]]; then
            echo "Error: The provided patch semver string '${{ inputs.patchName }}' is invalid." 
            exit 1 
          fi
        shell: bash

      - name: Get version
        run: echo CURRENT_VERSION="$(echo ${{ github.ref_name }} | sed -e "s/^stable-branch\///")" >> $GITHUB_ENV
      - name: Get tag
        run: echo PATCH_TAG=${{ env.CURRENT_VERSION }}.${{ inputs.patchName }} >> $GITHUB_ENV

      - name: Check if tag exists
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
        run: |
          trap "exit 0" EXIT
          response=$(gh api -H "Accept: application/vnd.github+json" /repos/${{ github.repository }}/git/ref/tags/$PATCH_TAG)
          if [[ "$response" == *"$PATCH_TAG"* ]]; then
            trap "exit 1" EXIT
            echo "Error: Tag $PATCH_TAG already exists"
            exit 1 
          fi

      - name: Save patch tag to outputs
        id: set_tag
        run: echo "PATCH_TAG=${{ env.CURRENT_VERSION }}.${{ inputs.patchName }}"  >> $GITHUB_OUTPUT

  build-amd-ver:
    needs: validate-patch-tag
    uses: ./.github/workflows/build-and-scan-image.yml
    with:
      PLATFORM_NAME: amd64
      TAG: ${{ needs.validate-patch-tag.outputs.PATCH_TAG }}
    secrets: inherit

  build-arm-ver:
    needs: validate-patch-tag
    uses: ./.github/workflows/build-and-scan-image.yml
    with:
      PLATFORM_NAME: arm64
      TAG: ${{ needs.validate-patch-tag.outputs.PATCH_TAG }}
    secrets: inherit

  publish-image:
    uses: ./.github/workflows/publish-image.yml
    needs: [validate-patch-tag, build-amd-ver, build-arm-ver]
    with:
      TAG: ${{ needs.validate-patch-tag.outputs.PATCH_TAG }}
      IS_LATEST: ${{ inputs.updateLatest }}
    secrets: inherit

  create-release:
    runs-on: ubuntu-latest
    needs: [validate-patch-tag, publish-image]
    name: Create release
    steps:
      - uses: actions/checkout@v3

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
      - name: Create tag
        uses: actions/github-script@v6
        with:
          script: |
            try{
              github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'refs/tags/${{ needs.validate-patch-tag.outputs.PATCH_TAG }}',
                sha: context.sha
              })
            } catch (error) {
              core.setFailed(error.message);
            }

      - name: Create a release in GitHub and upload assets
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
        run: gh release create --title "Fusion-Devkit ${{ needs.validate-patch-tag.outputs.PATCH_TAG }}" ${{ needs.validate-patch-tag.outputs.PATCH_TAG }} fusion-devkit-arm64/fusion-devkit-arm64.tar fusion-devkit-amd64/fusion-devkit-amd64.tar
        shell: bash
